name: CI

on: push

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-4.8,
          ubuntu-18.04-gcc-4.9,
          ubuntu-18.04-gcc-5,
          ubuntu-18.04-gcc-6,
          ubuntu-18.04-gcc-7,
          ubuntu-18.04-gcc-8,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-clang-3.5,
          ubuntu-18.04-clang-3.6,
          ubuntu-18.04-clang-3.7,
          ubuntu-18.04-clang-3.8,
          ubuntu-18.04-clang-3.9,
          ubuntu-18.04-clang-4.0,
          ubuntu-18.04-clang-5.0,
          ubuntu-18.04-clang-6.0,
          ubuntu-18.04-clang-7,
          ubuntu-18.04-clang-8,
          windows-2016-cl,
          windows-2016-clang-cl,
          windows-2016-clang,
          windows-2016-gcc,
          windows-2019-cl,
          windows-2019-clang-cl,
          windows-2019-clang,
          windows-2019-gcc,
          macOS-10.14-Xcode-9.4.1,
          macOS-10.14-Xcode-10.0,
          macOS-10.14-Xcode-10.1,
          macOS-10.14-Xcode-10.2,
          macOS-10.14-Xcode-10.2.1,
          macOS-10.14-Xcode-10.3
        ]

        include:
          - name: ubuntu-18.04-gcc-4.8
            os: ubuntu-18.04
            compiler: gcc
            version: "4.8"

          - name: ubuntu-18.04-gcc-4.9
            os: ubuntu-18.04
            compiler: gcc
            version: "4.9"

          - name: ubuntu-18.04-gcc-5
            os: ubuntu-18.04
            compiler: gcc
            version: "5"

          - name: ubuntu-18.04-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"

          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: "7"

          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-clang-3.5
            os: ubuntu-18.04
            compiler: clang
            version: "3.5"

          - name: ubuntu-18.04-clang-3.6
            os: ubuntu-18.04
            compiler: clang
            version: "3.6"

          - name: ubuntu-18.04-clang-3.7
            os: ubuntu-18.04
            compiler: clang
            version: "3.7"

          - name: ubuntu-18.04-clang-3.8
            os: ubuntu-18.04
            compiler: clang
            version: "3.8"

          - name: ubuntu-18.04-clang-3.9
            os: ubuntu-18.04
            compiler: clang
            version: "3.9"

          - name: ubuntu-18.04-clang-4.0
            os: ubuntu-18.04
            compiler: clang
            version: "4.0"

          - name: ubuntu-18.04-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            version: "5.0"

          - name: ubuntu-18.04-clang-6.0
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"

          - name: ubuntu-18.04-clang-7
            os: ubuntu-18.04
            compiler: clang
            version: "7"

          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"

          - name: windows-2016-cl
            os: windows-2016
            compiler: cl

          - name: windows-2016-clang-cl
            os: windows-2016
            compiler: clang-cl

          - name: windows-2016-clang
            os: windows-2016
            compiler: clang

          - name: windows-2019-cl
            os: windows-2019
            compiler: cl

          - name: windows-2016-gcc
            os: windows-2016
            compiler: gcc

          - name: windows-2019-clang-cl
            os: windows-2019
            compiler: clang-cl

          - name: windows-2019-clang
            os: windows-2019
            compiler: clang

          - name: windows-2019-gcc
            os: windows-2019
            compiler: gcc

          - name: macOS-10.14-Xcode-9.4.1
            os: macOS-10.14
            compiler: xcode
            version: "9.4.1"

          - name: macOS-10.14-Xcode-10.0
            os: macOS-10.14
            compiler: xcode
            version: "10"

          - name: macOS-10.14-Xcode-10.1
            os: macOS-10.14
            compiler: xcode
            version: "10.1"

          - name: macOS-10.14-Xcode-10.2
            os: macOS-10.14
            compiler: xcode
            version: "10.2"

          - name: macOS-10.14-Xcode-10.2.1
            os: macOS-10.14
            compiler: xcode
            version: "10.2.1"

          - name: macOS-10.14-Xcode-10.3
            os: macOS-10.14
            compiler: xcode
            version: "10.3"

    steps:
      - uses: actions/checkout@v1

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.13.5/cmake-3.13.5-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local

          sudo apt-get install -y ninja-build valgrind

          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main"
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe"
          sudo apt-get update

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }}
            echo "::set-env name=CC::gcc-${{ matrix.version }}"
            echo "::set-env name=CXX::g++-${{ matrix.version }}"
          else
            sudo apt-get install -y clang-${{ matrix.version }}
            echo "::set-env name=CC::clang-${{ matrix.version }}"
            echo "::set-env name=CXX::clang++-${{ matrix.version }}"
          fi

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
          scoop install ninja --global

          if ("${{ matrix.compiler }}".StartsWith("clang")) {
            scoop install llvm --global
          }

          if ("${{ matrix.compiler }}" -eq "gcc") {
            echo "::set-env name=CC::gcc"
            echo "::set-env name=CXX::g++"
          } elseif ("${{ matrix.compiler }}" -eq "clang") {
            echo "::set-env name=CC::clang"
            echo "::set-env name=CXX::clang++"
          } else {
            echo "::set-env name=CC::${{ matrix.compiler }}"
            echo "::set-env name=CXX::${{ matrix.compiler }}"
          }

          & .github\workflows\vsenv.bat -arch=x64 -host_arch=x64

      - name: Configure
        run: cmake -B build -S . -G Ninja

      - name: Build & Test Debug
        run: |
          cmake -DCMAKE_BUILD_TYPE=Debug -DDOCTEST_TEST_MODE=COMPARE build
          cmake --build build
          cd build && ctest -j2 --output-on-failure

      - name: Test Debug Valgrind (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          cmake -DDOCTEST_TEST_MODE=VALGRIND build
          cd build && ctest -j2 --output-on-failure

      - name: Build & Test Release
        run: |
          cmake -DCMAKE_BUILD_TYPE=Release -DDOCTEST_TEST_MODE=COMPARE build
          cmake --build build
          cd build && ctest -j2 --output-on-failure

      - name: Test Release Valgrind (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          cmake -DDOCTEST_TEST_MODE=VALGRIND build
          cd build && ctest -j2 --output-on-failure
