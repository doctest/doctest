name: CI

on:
  push:
    paths-ignore:
      - "doc/**"
      - "scripts/**"
      - "LICENSE.txt"
      - "README.md"
  pull_request:
    paths-ignore:
      - "doc/**"
      - "scripts/**"
      - "LICENSE.txt"
      - "README.md"

env:
  CTEST_OUTPUT_ON_FAILURE: ON
  CTEST_PARALLEL_LEVEL: 2

jobs:
  coverage:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: sudo apt-get install -y ninja-build lcov

      - name: Generate
        run: cmake -B build -S . -G Ninja -D CMAKE_CXX_FLAGS="-fprofile-arcs -ftest-coverage"

      - name: Build
        run: cmake --build build

      - name: Test
        run: ctest --test-dir build --no-tests=error

      - name: LCOV
        run: |
          mkdir coverage
          lcov -c -d build/ -o coverage/lcov.info --include "*doctest/parts*"

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: true

  clang-tidy:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: sudo apt-get install -y ninja-build clang-tidy-14

      - name: Generate
        run: cmake -B build -S . -G Ninja -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_EXPORT_COMPILE_COMMANDS=ON -D CMAKE_CXX_CLANG_TIDY="clang-tidy-14;-warnings-as-errors=*"

      - name: Build
        run: cmake --build build

  sanitizers:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        sanitizers: ["address", "thread", "undefined", "integer", "implicit-conversion", "nullability", "safe-stack"]

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: sudo apt-get install -y ninja-build

      - name: Generate
        run: cmake -B build -S . -G Ninja -D CMAKE_CXX_COMPILER=clang++ -D CMAKE_EXPORT_COMPILE_COMMANDS=ON -D CMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizers }}"

      - name: Build
        run: cmake --build build

      - name: Test
        run: ctest --test-dir build --no-tests=error

  ci:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: Ninja
      ASAN_OPTIONS: strict_string_checks=true:detect_odr_violation=2:detect_stack_use_after_return=true:check_initialization_order=true:strict_init_order=true
      TSAN_OPTIONS: force_seq_cst_atomics=1

    strategy:
      fail-fast: false
      matrix:
        os: ["windows-2019", "windows-2022"]
        compiler: ["cl", "clang", "clang-cl"]

        include:
          - container: ubuntu:18.04
            compiler: gcc
            version: "4.8"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: gcc
            version: "5"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: gcc
            version: "6"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: gcc
            version: "7"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: gcc
            version: "8"
            os: ubuntu-24.04

          - os: ubuntu-22.04
            compiler: gcc
            version: "9"

          - os: ubuntu-24.04
            compiler: gcc
            version: "10"

          - os: ubuntu-24.04
            compiler: gcc
            version: "11"

          - os: ubuntu-24.04
            compiler: gcc
            version: "12"

          - os: ubuntu-24.04
            compiler: gcc
            version: "13"

          - os: ubuntu-24.04
            compiler: gcc
            version: "14"

          - container: ubuntu:18.04
            compiler: clang
            version: "3.9"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: clang
            version: "4.0"
            os: ubuntu-24.04

          - container: ubuntu:18.04
            compiler: clang
            version: "5.0"
            os: ubuntu-24.04

          - container: ubuntu:20.04
            compiler: clang
            version: "6.0"
            os: ubuntu-24.04

          - container: ubuntu:20.04
            compiler: clang
            version: "7"
            os: ubuntu-24.04

          - container: ubuntu:20.04
            compiler: clang
            version: "8"
            os: ubuntu-24.04

          - container: ubuntu:20.04
            compiler: clang
            version: "9"
            os: ubuntu-24.04

          - container: ubuntu:20.04
            compiler: clang
            version: "10"
            os: ubuntu-24.04

          - os: ubuntu-22.04
            compiler: clang
            version: "11"

          - os: ubuntu-22.04
            compiler: clang
            version: "12"

          - os: ubuntu-22.04
            compiler: clang
            version: "13"

          - os: ubuntu-24.04
            compiler: clang
            version: "14"

          - os: ubuntu-24.04
            compiler: clang
            version: "15"

          - os: ubuntu-24.04
            compiler: clang
            version: "16"

          - os: ubuntu-24.04
            compiler: clang
            version: "17"

          - os: ubuntu-24.04
            compiler: clang
            version: "18"

          - os: macOS-10.15
            compiler: xcode
            version: "10.3"

          - os: macOS-latest
            compiler: xcode
            version: "13.2.1"

          - os: macos-12
            compiler: xcode
            version: "14.0.1"

          - os: macOS-latest
            compiler: gcc
            version: "11"

    steps:
      - uses: actions/checkout@v2

      # Ref: https://github.com/actions/checkout/issues/1590#issuecomment-2567109195
      - name: Prepare container (Linux, containerized)
        if: runner.os == 'Linux' && matrix.container != ''
        run: |
          docker pull ${{ matrix.container }}
          docker run --name build-container -d -v ${{ github.workspace }}:/workspace ${{ matrix.container }} tail -f /dev/null

          cat <<'EOF' > container-env.sh
          export CTEST_OUTPUT_ON_FAILURE="${{ env.CTEST_OUTPUT_ON_FAILURE }}"
          export CTEST_PARALLEL_LEVEL="${{ env.CTEST_PARALLEL_LEVEL }}"
          export CMAKE_GENERATOR="${{ env.CMAKE_GENERATOR }}"
          export ASAN_OPTIONS="${{ env.ASAN_OPTIONS }}"
          export TSAN_OPTIONS="${{ env.TSAN_OPTIONS }}"
          EOF

      - name: Install (Linux)
        if: runner.os == 'Linux' && matrix.container == ''
        run: |
          # Required for libc6-dbg:i386 and g++-multilib packages which are
          # needed for x86 builds.
          sudo dpkg --add-architecture i386

          sudo apt-get update
          sudo apt-get install -y cmake ninja-build valgrind libc6-dbg:i386

          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
          elif [ "${{ matrix.compiler }}" = "clang" ]; then
            sudo apt-get install -y clang-${{ matrix.version }} libclang-${{ matrix.version }}-dev llvm-${{ matrix.version }}-dev g++-multilib
          fi

      - name: Install (Linux, containerized)
        if: runner.os == 'Linux' && matrix.container != ''
        env:
          CMD: |
            dpkg --add-architecture i386

            # Configure Kitware repo for newer version of CMake.
            if [ "${{ matrix.container }}" = "ubuntu:18.04" ]; then
              apt-get update && apt-get install -y wget gpg
              wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
              echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ bionic main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            fi

            apt-get update
            apt-get install -y cmake ninja-build valgrind libc6-dbg:i386 python3

            if [ "${{ matrix.compiler }}" = "gcc" ]; then
              apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            elif [ "${{ matrix.compiler }}" = "clang" ]; then
              apt-get install -y clang-${{ matrix.version }} libclang-${{ matrix.version }}-dev llvm-${{ matrix.version }}-dev g++-multilib
            fi
        run: docker exec build-container bash -c "$CMD"

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          if [ "${{ matrix.compiler }}" = "xcode" ]; then
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
          fi

      - name: Configure x64
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build & Test x64
        if: matrix.container == ''
        run: python3 .github/workflows/build_and_test.py ${{ runner.os }} x64 ${{ matrix.compiler }} ${{ matrix.version }}

      - name: Build & Test x64 (Linux, containerized)
        if: runner.os == 'Linux' && matrix.container != ''
        env:
          CMD: |
            cd /workspace
            source container-env.sh
            python3 .github/workflows/build_and_test.py ${{ runner.os }} x64 ${{ matrix.compiler }} ${{ matrix.version }}
        run: docker exec build-container bash -c "$CMD"

      - name: Configure x86
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      # MacOS doesn't support x86 from Xcode 10 onwards.
      - name: Build & Test x86
        if: (runner.os == 'Linux' && matrix.container == '') || (runner.os == 'Windows' && matrix.compiler != 'clang-cl')
        run: python3 .github/workflows/build_and_test.py ${{ runner.os }} x86 ${{ matrix.compiler }} ${{ matrix.version }}

      - name: Build & Test x86 (Linux, containerized)
        if: runner.os == 'Linux' && matrix.container != ''
        env:
          CMD: |
            cd /workspace
            source container-env.sh
            python3 .github/workflows/build_and_test.py ${{ runner.os }} x86 ${{ matrix.compiler }} ${{ matrix.version }}
        run: docker exec build-container bash -c "$CMD"

  ci-min-gw:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        configuration: ["Debug", "Release"]

    steps:
      - uses: actions/checkout@v2

      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2

      - name: Generate
        run: cmake -B build -S . -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=${{ matrix.configuration }}

      - name: Build
        run: cmake --build build

      - name: Test
        run: ctest --test-dir build --no-tests=error

  ci-msvs:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ${{ matrix.toolset == 'v143' && 'windows-2022' || 'windows-2019' }}

    strategy:
      fail-fast: false
      matrix:
        toolset: ["v140", "v141", "v142", "v143", "ClangCl"]
        architecture: ["Win32", "x64"]
        configuration: ["Debug", "Release"]

    steps:
      - uses: actions/checkout@v2

      - name: Generate
        run: cmake -B build -S . -G "${{ matrix.toolset == 'v143' && 'Visual Studio 17 2022' || 'Visual Studio 16 2019' }}" \
            -A ${{ matrix.architecture }} -T ${{ matrix.toolset }}

      - name: Build
        run: cmake --build build --config ${{ matrix.configuration }}

      - name: Test
        run: ctest -C ${{ matrix.configuration }} --test-dir build --no-tests=error

  ci-icpc:
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        configuration: ["Debug", "Release"]

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          #wget -O - https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | sudo apt-key add -
          #sudo add-apt-repository "deb [signed-by=/etc/apt/keyrings/icpc.gpg] https://apt.repos.intel.com/oneapi all main"
          # apt-key is deprecated replace with below lines
          wget -O - https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | sudo gpg --dearmor |sudo tee /etc/apt/keyrings/icpc.gpg > /dev/null
          echo "deb [signed-by=/etc/apt/keyrings/icpc.gpg] https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/icpc.list
          sudo apt-get update
          sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic ninja-build

      - name: Generate
        run: |
          . /opt/intel/oneapi/setvars.sh
          cmake -B build -S . -G Ninja -D CMAKE_CXX_COMPILER=icc -D CMAKE_C_COMPILER=icc -D CMAKE_CXX_COMPILER=icpc -D CMAKE_BUILD_TYPE=${{ matrix.configuration }} -D CMAKE_CXX_FLAGS="-w2 -Wcheck -Werror -diag-disable=10441 -D DOCTEST_CONFIG_NO_CONTRADICTING_INLINE"

      - name: Build
        run: |
          . /opt/intel/oneapi/setvars.sh
          cmake --build build --config ${{ matrix.configuration }}
      - name: Test
        run: |
          . /opt/intel/oneapi/setvars.sh
          ctest -C ${{ matrix.configuration }} --test-dir build --no-tests=error
