##TODO

sorting the test order (by file, by test suite, or both, ASC/DESC...)

a message macro

break on assert in doctest

single header

trim "\"" from test names?



fix the global disabling



error checking of parameters (if the range is valid (first <= last), etc)
    add asserts

timing reports of tests, duration restrictions, kill of longer than, etc...

ability to supply ur own main

example with a python script that makes a bucket-style multithreaded execution of an executable with tests in it

ability to transfer/copy registered functions from one shared object to another so they are put in one hash_set and duplicates are filtered

tests/examples folders separate

process stuff under windows
    http://msdn.microsoft.com/en-us/library/windows/desktop/ms682512(v=vs.85).aspx
    http://msdn.microsoft.com/en-us/library/windows/desktop/ms682499(v=vs.85).aspx


CI
    travis
        compile all examples
        valgrind
            https://github.com/dlundquist/sniproxy/blob/master/.travis.yml
        clang static analysis
        
        coverage
            https://github.com/eddyxu/cpp-coveralls
            
            https://github.com/kylelutz/compute
            https://github.com/apolukhin/variant/blob/travisci/.travis.yml
            
    msvc
        just compile all the examples
        https://github.com/mkurdej/bft/blob/develop/appveyor.yml
        https://github.com/mapbox/variant/blob/master/appveyor.yml
        https://github.com/cppformat/cppformat/blob/master/appveyor.yml






THINK OF IN THE LONG TERM
    keep the 2 headers (main and implementation)?
    hierarchical test suites? using a stack for the pushed states
    to make it C compatible:
        option to use the C variant in C++
        [DONE] wrap all casts
        change c standard library includes
        use the struct keyword everywhere
        remove counter definitions from for loops
        remove exception catching
        migrate to pointers from references
        remove the fixture macro
        the CHECK macro... will need CHECK_EQUAL and all that bullshit because it cannot be implemented in plain C...
        remove namespaces (wrap in a macro every doctest function declaration/definition/call for a "doctest_" prefix)
    documentation
        mocking features are not necessary because they are orthogonal to testing and a different third party library may be used for that (google mock)
        document how to use spaces for filters in the comma separated list (using "")
        tests are ran serially
        document all the options
